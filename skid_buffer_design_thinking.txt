Theory source: http://fpgacpu.ca/fpga/Pipeline_Skid_Buffer.html#:~:text=A%20skid%20buffer%20is%20the,smooth%2Dout%20data%20rate%20mismatches.
Points to be noted:

-- skid buffer is the smallest Pipeline_FIFO_buffer, with only two entries. 
-- Useful for concurrency/timing closure, not for smoothing out data rate mismatches.
-- bcz of being smaller than LUTRAM/Block-RAM, give more freedom for Place N route.

-- Aim is to allow each end to send off one item of data without having to wait for a response
-- what is "response" here? Is it "ready" signal?  
-- This allows you to register the "ready" signal while maintaining the same network throughput.
-- what is network throughput and how is it measured?

-- signal used to indicate if there is data to send -> "Valid"
-- signal used to indicate if the module is able to receive data -> "ready"


-- data and valid have same direction, from input to output interface
-- ready has opposite direction as that of valid, from output to input interface

Input                           Output
-----                           ------
              -------------
i_ready_o <--|             |<-- e_ready_i
i_valid_i -->| Skid Buffer |--> e_valid_o
i_data_i  -->|             |--> e_data_o
              -------------
              
-- requester is ingress
-- completer is egress 

-- i_valid_i : Input valid from the ingress port (Ingress == entry)
-- i_data_i  : Data from the ingress port
-- i_ready_o : "Registered" ready output to the ingress port
-- 
-- e_ready_i : Egress port ready input (Egress == exit)
-- e_valid_o : Valid output to the egress port
-- e_data_o  : Data to the egress port

Requirements:
-- Valid will remain asserted until ready is seen and 
   may remain asserted in case of back-to-back requests
-- Data will remain stable on the interface until ready is seen
-- The buffer must accept data after reset (since the buffer would be empty)

Design Description:

-- have 2 registers - main_buff, extra_buff
-- input --> extra_buff --> main_buff --> output 
-- e_valid_o is wired to i_valid_i
-- assign e_valid_o = i_valid_i;

-- skid buffer acts as pass through when both valid_i and ready_i are high.
-- when valid and ready are both high, data transfer occurs.

-- i_ready_o is 1 clk cycle delayed version of e_ready_i
-- but at cycle T3, i_ready_o goes "1" at the same time as i_valid_i, why?

-- Need to write under what conditions data will be taken into
   extra from input, into main from extra and to output from main?
   
-- at T3, how come e_data_o is taking i_data_i w/o clock delay?
-- From FPGACPU.CA
-- To resolve this contradiction, 
-- we need an extra buffer register to capture the incoming data during a clock cycle where 
-- the input interface is transferring data, but the output interface isn't, and 
-- there is already data in the main register.

-- design can be in empty, half or full states. How do I know in which state the design is?
-- should I maintain a count? When should I increment / decrement it?
-- At reset count = 0

-- when will be the i_ready_o "1"?
-- based on the waveform:
-- either after 1 cycle of e_ready_i 

-- how will we know if skid buffer is empty, half, full?
-- e_ready_i will act as fifo_read and 
-- i_valid_i will act as fifo_write

-- just_ivi will make transition from empty -> half -> full
-- ready_rise will make transition from full -> half -> empty
-- what happens when both are simultaneously present?

-- how will the transition from pass through phase to skid buffer phase 
   will happen?
   
-- e_data_o is "0" at the end cycle,
-- what is relationship b/w i_data_i and e_data_o, when i_valid_i is "0"
   but e_ready_i is "1"


After completion:

-- what are "credit based connections"?
